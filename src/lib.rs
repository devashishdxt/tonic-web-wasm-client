//! Rust implementation of [`grpc-web`](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md) protocol that allows
//! using [`tonic`](https://crates.io/crates/tonic) in browsers via webassembly.
//!
//! # Usage
//!
//! To use `tonic-web-wasm-client`, you need to add the following to your `Cargo.toml`:
//!
//! ```toml
//! [dependencies]
//! tonic-web-wasm-client = "0.7"
//! ```
//!
//! ## Example
//! To use `tonic` gRPC clients in browser, compile your code with tonic's `transport` feature disabled (this will disable
//! the default transport layer of tonic). Then initialize the query client as follows:
//!
//! ```rust,ignore
//! use tonic_web_wasm_client::Client;
//!
//! let base_url = "http://localhost:9001"; // URL of the gRPC-web server
//! let query_client = QueryClient::new(Client::new(base_url)); // `QueryClient` is the client generated by tonic
//!
//! let response = query_client.status().await; // Execute your queries the same way as you do with defaule transport layer
//! ```
//!
//! ## Building
//!
//! Since `tonic-web-wasm-client` is primarily intended for use in browsers, a crate that uses `tonic-web-wasm-client`
//! can only be built for `wasm32` target architectures:
//!
//! ```shell
//! cargo build --target wasm32-unknown-unknown
//! ```
//!
//! Other option is to create a `.cargo/config.toml` in your crate repository and add a build target there:
//!
//! ```toml
//! [build]
//! target = "wasm32-unknown-unknown"
//! ```
//!
//! ## Custom `Accept` header:
//!
//! This library allows you to set a custom `Accept` header for the requests. This can be useful if you need to specify
//! a different content type for the responses. But, be aware that if you set a custom `Accept` header, the client may
//! not be able to handle the response correctly.

mod body_stream;
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
mod call;
mod client;
mod content_type;
mod error;
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
mod fetch;
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
pub mod options;

mod response_body;

#[cfg(all(target_arch = "wasm32", target_os = "wasi", target_env = "p2"))]
mod wasip2;
#[cfg(all(target_arch = "wasm32", target_os = "wasi", target_env = "p2"))]
pub(crate) use self::wasip2::call;
#[cfg(all(target_arch = "wasm32", target_os = "wasi", target_env = "p2"))]
pub use self::wasip2::options;

pub use self::response_body::ResponseBody;

pub use self::{client::Client, error::Error};
